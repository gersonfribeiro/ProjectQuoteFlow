import { EventEmitter, InjectionToken } from '@angular/core';
export const NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');
export const NEW_CONFIG = new InjectionToken('new ngx-mask config');
export const INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');
export const initialConfig = {
    suffix: '',
    prefix: '',
    thousandSeparator: ' ',
    decimalMarker: ['.', ','],
    clearIfNotMatch: false,
    showTemplate: false,
    showMaskTyped: false,
    placeHolderCharacter: '_',
    dropSpecialCharacters: true,
    hiddenInput: undefined,
    shownMaskExpression: '',
    separatorLimit: '',
    allowNegativeNumbers: false,
    validation: true,
    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '"', "'"],
    leadZeroDateTime: false,
    apm: false,
    leadZero: false,
    keepCharacterPositions: false,
    triggerOnMaskChange: false,
    inputTransformFn: (value) => value,
    outputTransformFn: (value) => value,
    maskFilled: new EventEmitter(),
    patterns: {
        '0': {
            pattern: new RegExp('\\d'),
        },
        '9': {
            pattern: new RegExp('\\d'),
            optional: true,
        },
        X: {
            pattern: new RegExp('\\d'),
            symbol: '*',
        },
        A: {
            pattern: new RegExp('[a-zA-Z0-9]'),
        },
        S: {
            pattern: new RegExp('[a-zA-Z]'),
        },
        U: {
            pattern: new RegExp('[A-Z]'),
        },
        L: {
            pattern: new RegExp('[a-z]'),
        },
        d: {
            pattern: new RegExp('\\d'),
        },
        m: {
            pattern: new RegExp('\\d'),
        },
        M: {
            pattern: new RegExp('\\d'),
        },
        H: {
            pattern: new RegExp('\\d'),
        },
        h: {
            pattern: new RegExp('\\d'),
        },
        s: {
            pattern: new RegExp('\\d'),
        },
    },
};
export const timeMasks = [
    "Hh:m0:s0" /* MaskExpression.HOURS_MINUTES_SECONDS */,
    "Hh:m0" /* MaskExpression.HOURS_MINUTES */,
    "m0:s0" /* MaskExpression.MINUTES_SECONDS */,
];
export const withoutValidation = [
    "percent" /* MaskExpression.PERCENT */,
    "Hh" /* MaskExpression.HOURS_HOUR */,
    "s0" /* MaskExpression.SECONDS */,
    "m0" /* MaskExpression.MINUTES */,
    "separator" /* MaskExpression.SEPARATOR */,
    "d0/M0/0000" /* MaskExpression.DAYS_MONTHS_YEARS */,
    "d0/M0" /* MaskExpression.DAYS_MONTHS */,
    "d0" /* MaskExpression.DAYS */,
    "M0" /* MaskExpression.MONTHS */,
];
//# sourceMappingURL=data:application/json;base64,